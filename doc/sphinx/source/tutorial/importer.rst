.. _tutorial-importer:

########################################
 Add an import wizard to an application
########################################

In this tutorial we will add an import wizard to the movie database 
application created in the :ref:`tutorial-videostore` tutorial.

We assume Camelot is properly :ref:`installed <doc-install>` and the movie
database application is working.

Introduction
============

Most applications need a way to import data.  This data is often delivered
in files generated by another application or company.  To demonstrate this
process we will build a wizard that allows the user to import cover images
into the movie database.  For each image the user selects, a new Movie will
be created with the selected image as a cover image.

Create an action
================

All user interaction in Camelot is handled through :ref:`doc-actions`.  For 
actions that run in the context of the application, we use the 
:ref:`doc-application-action`.  We first create a file :file:`importer.py` in 
the same directory as :file:`application_admin.py`.

In this file we create subclass of 
:class:`camelot.admin.action.application_action.ApplicationAction` which will be 
the entry point of the import wizard::

    from camelot.admin.action.application_action import ApplicationAction
    from camelot.core.utils import ugettext_lazy as _
    
    class ImportCovers( ApplicationAction ):
        verbose_name = _('Import cover images')
        
        def model_run( self, model_context ):
            yield

So now we haven an ``ImportCovers`` action.  Such an action has a 
``verbose_name`` class attribute with the name of the action as shown to the
user.

::

The most important method of the action is the ``model_run`` method, which
will be triggered when the user clicks the action.  This method should be a
generator that yields an object whenever user interaction is required.

Add the action to the GUI
=========================

Now the user needs to be able to trigger the action, therefor we add an instance
of the ``ImportCovers`` action to the sections defined in the ``get_sections``
method of the ``ApplicationAdmin``:

.. literalinclude:: ../../../../camelot_example/application_admin.py
   :start-after: begin sections
   :end-before: end sections

This will make sure the action pops up in the **Movies** section of the
application.

Select the files
================

To make the action do something usefull, we will implement its ``model_run``
method.  Inside the ``model_run`` method, we can :keyword:`yield` various 
``ActionStep`` objects to the GUI.  An ``ActionStep`` is a part of the action
that requires user interaction (the user answering a question).  The result
of this interaction is returned by the :keyword:`yield` statement.

To ask the user for a number of image files to import, we will pop up a file
selection dialog inside the ``model_run`` method:

.. literalinclude:: ../../../../camelot_example/importer.py
   :start-after: begin select files
   :end-before: end select files

Create new movies
=================

Keep the user informed
======================
